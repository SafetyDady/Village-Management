version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: village-management-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: village_management_prod
      POSTGRES_USER: village_mgmt_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - village-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U village_mgmt_user -d village_management_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: village-management-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - village-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
    container_name: village-management-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: village_management_prod
      DB_USER: village_mgmt_user
      DB_PASSWORD: ${DB_PASSWORD}
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRES: 3600
      JWT_REFRESH_TOKEN_EXPIRES: 2592000
      
      # Flask Configuration
      FLASK_ENV: production
      FLASK_DEBUG: False
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY}
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS}
      
      # Redis Configuration (if using)
      CACHE_TYPE: redis
      CACHE_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Logging
      LOG_LEVEL: INFO
      
      # Security
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_PER_MINUTE: 60
      RATE_LIMIT_PER_HOUR: 1000
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - village-network
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Admin Dashboard)
  frontend:
    build:
      context: ../admin-dashboard
      dockerfile: Dockerfile.production
      args:
        VITE_API_BASE_URL: ${FRONTEND_API_URL}
    container_name: village-management-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - village-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: village-management-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - village-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: village-management-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - village-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: village-management-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - village-network
    profiles:
      - monitoring

networks:
  village-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

